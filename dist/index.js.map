{
  "version": 3,
  "sources": ["../lib/dtypes.json", "../lib/main.js", "../lib/enum.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["[\n  \"binary\",\n  \"bool\",\n  \"complex64\",\n  \"complex128\",\n  \"float32\",\n  \"float64\",\n  \"generic\",\n  \"int16\",\n  \"int32\",\n  \"int8\",\n  \"uint16\",\n  \"uint32\",\n  \"uint8\",\n  \"uint8c\"\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DTYPES = require( './dtypes.json' );\n\n\n// MAIN //\n\n/**\n* Returns a list of strided array data type strings.\n*\n* @returns {StringArray} list of strided array data type strings\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*/\nfunction dtypes() {\n\treturn DTYPES.slice();\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtypes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndtypes = require( '@stdlib/ndarray-dtypes' ).enum;\n\n\n// VARIABLES //\n\nvar dt = ndtypes();\n\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data strings to enumeration constants for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of strided arrays.\n*\n* @private\n* @returns {Object} object mapping supported data strings strings to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the returned object should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t'bool': dt[ 'bool' ],\n\n\t\t'int8': dt[ 'int8' ],\n\t\t'uint8': dt[ 'uint8' ],\n\t\t'uint8c': dt[ 'uint8c' ],\n\t\t'int16': dt[ 'int16' ],\n\t\t'uint16': dt[ 'uint16' ],\n\t\t'int32': dt[ 'int32' ],\n\t\t'uint32': dt[ 'uint32' ],\n\t\t'int64': dt[ 'int64' ],\n\t\t'uint64': dt[ 'uint64' ],\n\n\t\t'float32': dt[ 'float32' ],\n\t\t'float64': dt[ 'float64' ],\n\n\t\t'complex64': dt[ 'complex64' ],\n\t\t'complex128': dt[ 'complex128' ],\n\n\t\t'binary': dt[ 'binary' ],\n\n\t\t'generic': dt[ 'generic' ],\n\n\t\t'notype': dt[ 'notype' ],\n\n\t\t'userdefined_type': dt[ 'userdefined_type' ]\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = enumeration;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils-keys' );\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of strided array data types.\n*\n* @module @stdlib/strided-dtypes\n*\n* @example\n* var dtypes = require( '@stdlib/strided-dtypes' );\n*\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var enumeration = require( '@stdlib/strided-dtypes' ).enum;\n*\n* var table = enumeration();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar enumeration = require( './enum.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACE,SACA,OACA,YACA,aACA,UACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,QACA,QACF,ICfA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,IAcb,SAASC,GAAS,CACjB,OAAOD,EAAO,MAAM,CACrB,CAKAD,EAAO,QAAUE,IC3CjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,wBAAyB,EAAE,KAK9CC,EAAKD,EAAQ,EAoBjB,SAASE,GAAc,CAEtB,MAAO,CACN,KAAQD,EAAI,KAEZ,KAAQA,EAAI,KACZ,MAASA,EAAI,MACb,OAAUA,EAAI,OACd,MAASA,EAAI,MACb,OAAUA,EAAI,OACd,MAASA,EAAI,MACb,OAAUA,EAAI,OACd,MAASA,EAAI,MACb,OAAUA,EAAI,OAEd,QAAWA,EAAI,QACf,QAAWA,EAAI,QAEf,UAAaA,EAAI,UACjB,WAAcA,EAAI,WAElB,OAAUA,EAAI,OAEd,QAAWA,EAAI,QAEf,OAAUA,EAAI,OAEd,iBAAoBA,EAAI,gBACzB,CACD,CAKAF,EAAO,QAAUG,ICjFjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,yCAA0C,EACjEC,EAAa,QAAS,oBAAqB,EA4B/C,SAASC,EAAQC,EAAQC,EAAS,CACjC,IAAIC,EACAC,EACA,EAGJ,IADAD,EAAOJ,EAAYG,CAAO,EACpB,EAAI,EAAG,EAAIC,EAAK,OAAQ,IAC7BC,EAAID,EAAM,CAAE,EACZL,EAAaG,EAAQG,EAAGF,EAAQE,CAAE,CAAE,EAErC,OAAOH,CACR,CAKAJ,EAAO,QAAUG,IC3BjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAc,IACdC,EAAS,IAKbH,EAAaC,EAAM,OAAQC,CAAY,EACvCC,EAAQF,EAAMC,EAAY,CAAE,EAK5B,OAAO,QAAUD",
  "names": ["require_dtypes", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "DTYPES", "dtypes", "require_enum", "__commonJSMin", "exports", "module", "ndtypes", "dt", "enumeration", "require_assign", "__commonJSMin", "exports", "module", "setReadOnly", "objectKeys", "assign", "target", "source", "keys", "k", "setReadOnly", "main", "enumeration", "assign"]
}
